[
  {
    "id": "2",
    "title": "Học CSS Flexbox",
    "description": "Làm bài tập layout với Flexbox row và column",
    "priority": "medium",
    "status": "inprogress",
    "index": 1000
  },
  {
    "id": "3",
    "title": "Học CSS Grid",
    "description": "Tạo giao diện responsive với CSS Grid",
    "priority": "medium",
    "status": "inprogress",
    "index": 2000
  },
  {
    "id": "10",
    "title": "Học React Hooks",
    "description": "Sử dụng useState và useEffect",
    "priority": "medium",
    "status": "inprogress",
    "index": 3000
  },
  {
    "id": "12",
    "title": "Học React Router",
    "description": "Tạo trang đăng nhập và dashboard",
    "priority": "medium",
    "status": "inprogress",
    "index": 4000
  },
  {
    "id": "15",
    "title": "Học Axios fetch API",
    "description": "Kết nối MockAPI để lấy dữ liệu",
    "priority": "high",
    "status": "inprogress",
    "index": 5000
  },
  {
    "id": "18",
    "title": "Tối ưu performance React",
    "description": "Dùng React.memo và useCallback",
    "priority": "low",
    "status": "inprogress",
    "index": 6000
  },
  {
    "id": "4",
    "title": "Làm mini project HTML + CSS",
    "description": "Tạo website CV cá nhân bằng HTML và CSS",
    "priority": "high",
    "status": "completed",
    "index": 1000
  },
  {
    "id": "8",
    "title": "Làm ToDo List bằng JavaScript",
    "description": "Ứng dụng CRUD đơn giản với localStorage",
    "priority": "high",
    "status": "completed",
    "index": 2000
  },
  {
    "id": "11",
    "title": "Làm mini project React",
    "description": "Todo App quản lý task",
    "priority": "high",
    "status": "completed",
    "index": 3000
  },
  {
    "id": "17",
    "title": "Làm project nhỏ với API",
    "description": "Ứng dụng chuyển đổi tiền tệ",
    "priority": "medium",
    "status": "completed",
    "index": 4000
  },
  {
    "id": "19",
    "title": "Học TailwindCSS",
    "description": "Tạo UI nhanh với Tailwind",
    "priority": "medium",
    "status": "completed",
    "index": 5000
  },
  {
    "id": "5",
    "title": "Học JavaScript cơ bản",
    "description": "Biết cách sử dụng biến, hàm và vòng lặp",
    "priority": "high",
    "status": "incomplete",
    "index": 1000
  },
  {
    "id": "7",
    "title": "Học ES6",
    "description": "Tìm hiểu let, const, arrow function, destructuring",
    "priority": "high",
    "status": "incomplete",
    "index": 2000
  },
  {
    "id": "9",
    "title": "Học React cơ bản",
    "description": "Biết cách tạo component và props",
    "priority": "high",
    "status": "incomplete",
    "index": 3000
  },
  {
    "id": "13",
    "title": "Học Context API",
    "description": "Chia sẻ state toàn cục trong React",
    "priority": "low",
    "status": "incomplete",
    "index": 4000
  },
  {
    "id": "14",
    "title": "Học Redux cơ bản",
    "description": "Quản lý state với Redux",
    "priority": "medium",
    "status": "incomplete",
    "index": 5000
  },
  {
    "id": "16",
    "title": "Học Authentication",
    "description": "Login/Logout với JWT token",
    "priority": "high",
    "status": "incomplete",
    "index": 6000
  }
]
import { useState } from "react";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";

const initialData = {
  incomplete: [
    { id: "1", title: "Task A" },
    { id: "2", title: "Task B" },
    { id: "3", title: "Task C" },
  ],
  inprogress: [{ id: "4", title: "Task D" }],
  completed: [{ id: "5", title: "Task E" }],
};

export default function TodoBoard() {
  const [tasks, setTasks] = useState(initialData);

  const handleDragEnd = (result) => {
    const { source, destination } = result;

    if (!destination) return;

    // Nếu cùng 1 cột → reorder
    if (source.droppableId === destination.droppableId) {
      const column = tasks[source.droppableId];
      const newItems = Array.from(column);

      // lấy item bị kéo ra
      const [movedItem] = newItems.splice(source.index, 1);
      // chèn vào vị trí mới
      newItems.splice(destination.index, 0, movedItem);

      setTasks({
        ...tasks,
        [source.droppableId]: newItems,
      });
    } else {
      // Nếu khác cột → move sang column khác
      const sourceItems = Array.from(tasks[source.droppableId]);
      const destItems = Array.from(tasks[destination.droppableId]);

      const [movedItem] = sourceItems.splice(source.index, 1);
      destItems.splice(destination.index, 0, movedItem);

      setTasks({
        ...tasks,
        [source.droppableId]: sourceItems,
        [destination.droppableId]: destItems,
      });
    }
  };

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <div style={{ display: "flex", gap: 20 }}>
        {Object.entries(tasks).map(([columnId, columnItems]) => (
          <Droppable key={columnId} droppableId={columnId}>
            {(provided) => (
              <div
                ref={provided.innerRef}
                {...provided.droppableProps}
                style={{
                  padding: 10,
                  width: 250,
                  minHeight: 300,
                  border: "1px solid gray",
                  borderRadius: 8,
                }}
              >
                <h3 style={{ textAlign: "center" }}>{columnId}</h3>
                {columnItems.map((item, index) => (
                  <Draggable
                    key={item.id}
                    draggableId={item.id}
                    index={index}
                  >
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        style={{
                          padding: 10,
                          marginBottom: 8,
                          background: "lightblue",
                          borderRadius: 5,
                          ...provided.draggableProps.style,
                        }}
                      >
                        {item.title}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        ))}
      </div>
    </DragDropContext>
  );
}